# Generated by Django 5.0.4 on 2024-04-23 18:07

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Awards',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='Award')),
                ('earn_year', models.DateTimeField(verbose_name='Earned date')),
                ('credit_link', models.URLField(verbose_name='Credit link')),
                ('description', models.TextField(max_length=200, verbose_name='Description')),
                ('is_active', models.BooleanField(default=False, verbose_name='Is active')),
            ],
        ),
        migrations.CreateModel(
            name='CategoryBlog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='Title')),
                ('url_title', models.CharField(max_length=200, unique=True, verbose_name='URL Title')),
                ('is_active', models.BooleanField(default=False, verbose_name='Is active')),
            ],
        ),
        migrations.CreateModel(
            name='CommentBlog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
                ('email', models.EmailField(max_length=254, verbose_name='Email')),
                ('description', models.TextField(max_length=100, verbose_name='Description')),
                ('comment_date', models.DateTimeField(auto_now_add=True, verbose_name='Comment date')),
                ('is_okay', models.BooleanField(default=False, verbose_name='Is okay')),
            ],
        ),
        migrations.CreateModel(
            name='Education',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.CharField(choices=[('bachelor', 'bachelor'), ('master', 'master'), ('PHD', 'PHD')], max_length=20, verbose_name='graduate level')),
                ('university', models.CharField(max_length=100, verbose_name='university')),
                ('start_year', models.PositiveIntegerField(verbose_name='start year')),
                ('end_year', models.PositiveIntegerField(verbose_name='end year')),
                ('about_education', models.TextField(max_length=300, verbose_name='about education')),
                ('is_active', models.BooleanField(default=False, verbose_name='Is active')),
            ],
        ),
        migrations.CreateModel(
            name='Experience',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company', models.CharField(max_length=100, verbose_name='Company name')),
                ('position', models.CharField(max_length=100, verbose_name='Position')),
                ('start_year', models.PositiveIntegerField(verbose_name='Start year')),
                ('end_year', models.PositiveIntegerField(verbose_name='End year')),
                ('about_experience', models.TextField(max_length=1000, verbose_name='About work experience')),
                ('is_active', models.BooleanField(default=False, verbose_name='Is active')),
            ],
        ),
        migrations.CreateModel(
            name='MyOffer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='Title')),
                ('description', models.TextField(max_length=300, verbose_name='Description')),
                ('is_active', models.BooleanField(default=False, verbose_name='Is active')),
            ],
        ),
        migrations.CreateModel(
            name='Skills',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='Skill title')),
                ('percentage', models.PositiveIntegerField(verbose_name='Percentage')),
                ('level', models.CharField(max_length=20, verbose_name='Level')),
                ('is_active', models.BooleanField(default=False, verbose_name='Is active')),
            ],
        ),
        migrations.CreateModel(
            name='MyBlog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='Title')),
                ('image', models.ImageField(upload_to='articles/', verbose_name='Image')),
                ('deployment_date', models.DateTimeField(auto_now_add=True, verbose_name='Deployment date')),
                ('description', models.TextField(max_length=1000, verbose_name='Description')),
                ('is_active', models.BooleanField(default=False, verbose_name='Is active')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='category', to='pages.categoryblog', verbose_name='Category')),
                ('comment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='comment', to='pages.commentblog', verbose_name='Comment')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('long_description', models.TextField(blank=True, max_length=300, null=True, verbose_name='About description')),
                ('short_description', models.TextField(blank=True, max_length=20, null=True, verbose_name='Home description')),
                ('instagram', models.URLField(blank=True, null=True, verbose_name='Instagram')),
                ('telegram', models.URLField(blank=True, null=True, verbose_name='Telegram')),
                ('linkedin', models.URLField(blank=True, null=True, verbose_name='Linkedin')),
                ('github', models.URLField(blank=True, null=True, verbose_name='Github')),
                ('total_project', models.PositiveIntegerField(blank=True, null=True, verbose_name='Total Project')),
                ('experience_year', models.PositiveIntegerField(blank=True, null=True, verbose_name='Experience Year')),
                ('clients', models.PositiveIntegerField(blank=True, null=True, verbose_name='Total clients')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('award', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='award', to='pages.awards', verbose_name='Award')),
                ('education', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='education', to='pages.education', verbose_name='Education')),
                ('work_experience', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='experience', to='pages.experience', verbose_name='Experience')),
                ('my_offer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='my_offer', to='pages.myoffer', verbose_name='My offer')),
                ('skill', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='skill', to='pages.skills', verbose_name='Skill')),
            ],
            options={
                'verbose_name': 'My user',
                'verbose_name_plural': 'My users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
